import { UqApi } from '../../net';
import { LocalCache } from '../../tool';
import { Uq, Field, ArrFields, FieldMap } from './uq';
import { Tuid } from './tuid';
export declare abstract class Entity {
    private jName;
    schema: any;
    ver: number;
    sys?: boolean;
    readonly uq: Uq;
    readonly name: string;
    readonly typeId: number;
    readonly cache: LocalCache;
    readonly uqApi: UqApi;
    abstract readonly typeName: string;
    readonly sName: string;
    fields: Field[];
    arrFields: ArrFields[];
    returns: ArrFields[];
    constructor(uq: Uq, name: string, typeId: number);
    face: any;
    private fieldMaps;
    fieldMap(arr?: string): FieldMap;
    loadSchema(): Promise<void>;
    clearSchema(): void;
    setSchema(schema: any): void;
    buildFieldsTuid(): void;
    schemaStringify(): string;
    tuidFromName(fieldName: string, arrName?: string): Tuid;
    buildParams(params: any): any;
    private buildFieldsParams;
    buildDateTimeParam(val: any): number | "";
    buildDateParam(val: any): string;
    pack(data: any): string;
    private escape;
    private packRow;
    private packArr;
    protected cacheFieldsInValue(values: any, fields: Field[]): void;
    protected unpackTuidIdsOfFields(values: string[], fields: Field[]): any[];
    unpackSheet(data: string): any;
    unpackReturns(data: string): any;
    protected unpackRow(ret: any, fields: Field[], data: string, p: number): number;
    private to;
    private unpackArr;
}
