import * as React from 'react';
import { Controller } from '../../../ui';
import { Entities, TuidMain, Action, Sheet, Query, Book, Map, Entity, Tuid, History, Pending } from '../../entities';
import { CLink } from '../link';
import { CBook, BookUI } from '../book';
import { CSheet, SheetUI } from '../sheet';
import { ActionUI, CAction } from '../action';
import { QueryUI, CQuery, CQuerySelect } from '../query';
import { CTuidMain, TuidUI, CTuidInfo, CTuidSelect, CTuidEdit, CTuidList } from '../tuid';
import { MapUI, CMap } from '../map';
import { CEntity, EntityUI } from '../CVEntity';
import { VUq } from './vUq';
import { CHistory, HistoryUI } from '../history';
import { CPending, PendingUI } from '../pending';
import { CApp } from '../CApp';
export declare type EntityType = 'sheet' | 'action' | 'tuid' | 'query' | 'book' | 'map' | 'history' | 'pending';
export interface UqUI {
    CTuidMain?: typeof CTuidMain;
    CTuidEdit?: typeof CTuidEdit;
    CTuidList?: typeof CTuidList;
    CTuidSelect?: typeof CTuidSelect;
    CTuidInfo?: typeof CTuidInfo;
    CQuery?: typeof CQuery;
    CQuerySelect?: typeof CQuerySelect;
    CMap?: typeof CMap;
    CAction?: typeof CAction;
    CSheet?: typeof CSheet;
    CBook?: typeof CBook;
    CHistory?: typeof CHistory;
    CPending?: typeof CPending;
    tuid?: {
        [name: string]: TuidUI;
    };
    sheet?: {
        [name: string]: SheetUI;
    };
    action?: {
        [name: string]: ActionUI;
    };
    map?: {
        [name: string]: MapUI;
    };
    query?: {
        [name: string]: QueryUI;
    };
    book?: {
        [name: string]: BookUI;
    };
    history?: {
        [name: string]: HistoryUI;
    };
    pending?: {
        [name: string]: PendingUI;
    };
    res?: any;
}
export declare class CUq extends Controller {
    private ui;
    private CTuidMain;
    private CTuidEdit;
    private CTuidList;
    private CTuidSelect;
    private CTuidInfo;
    private CQuery;
    private CQuerySelect;
    private CMap;
    private CAction;
    private CSheet;
    private CBook;
    private CHistory;
    private CPending;
    constructor(cApp: CApp, uq: string, appId: number, uqId: number, access: string, ui: UqUI);
    protected internalStart(): Promise<void>;
    cApp: CApp;
    uq: string;
    id: number;
    res: any;
    entities: Entities;
    error: string;
    private schemaLoaded;
    protected loadEntites(): Promise<void>;
    loadSchema(): Promise<string>;
    getQuerySearch(name: string): Promise<Query>;
    getTuidPlaceHolder(tuid: Tuid): any;
    getNone(): any;
    protected isSysVisible: boolean;
    protected isVisible(entity: Entity): boolean;
    navSheet(sheetTypeId: number, sheetId: number): Promise<void>;
    sheet(entityName: string): any;
    action(entityName: string): any;
    query(entityName: string): any;
    book(entityName: string): any;
    map(entityName: string): any;
    history(entityName: string): any;
    pending(entityName: string): any;
    tuid(entityName: string): any;
    tuidDiv(entityName: string, divName: string): any;
    cSheetFromName(entityName: string): CSheet;
    cActionFromName(entityName: string): CAction;
    cQueryFromName(entityName: string): CQuery;
    cBookFromName(entityName: string): CBook;
    cMapFromName(entityName: string): CMap;
    cHistoryFromName(entityName: string): CHistory;
    cPendingFromName(entityName: string): CPending;
    cTuidMainFromName(entityName: string): CTuidMain;
    cTuidEditFromName(entityName: string): CTuidEdit;
    cTuidInfoFromName(entityName: string): CTuidInfo;
    cTuidSelectFromName(entityName: string): CTuidSelect;
    cFromName(entityType: EntityType, entityName: string): CEntity<Entity, EntityUI>;
    linkFromName(entityType: EntityType, entityName: string): CLink;
    private getUI;
    link(cEntity: CEntity<Entity, EntityUI>): CLink;
    readonly tuidLinks: any;
    cTuidMain(tuid: TuidMain): CTuidMain;
    cTuidEdit(tuid: TuidMain): CTuidEdit;
    cTuidList(tuid: TuidMain): CTuidList;
    cTuidSelect(tuid: Tuid): CTuidSelect;
    cTuidInfo(tuid: TuidMain): CTuidInfo;
    cSheet(sheet: Sheet): CSheet;
    readonly sheetLinks: any;
    cAction(action: Action): CAction;
    readonly actionLinks: any;
    cQuery(query: Query): CQuery;
    cQuerySelect(queryName: string): CQuerySelect;
    readonly queryLinks: any;
    cBook(book: Book): CBook;
    readonly bookLinks: any;
    cHistory(history: History): CHistory;
    readonly historyLinks: any;
    cPending(pending: Pending): CPending;
    readonly pendingLinks: any;
    cMap(map: Map): CMap;
    readonly mapLinks: any;
    getTuidContent(tuid: Tuid): React.StatelessComponent<any>;
    showTuid(tuid: Tuid, id: number): Promise<void>;
    protected readonly VUq: typeof VUq;
    render(): JSX.Element;
}
